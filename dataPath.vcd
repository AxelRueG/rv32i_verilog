$date
	Wed Feb  7 00:27:35 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ns
$end
$scope module dataPath_tb $end
$var wire 32 ! writeData [31:0] $end
$var wire 16 " pc [15:0] $end
$var wire 32 # ALUResult [31:0] $end
$var reg 3 $ ALUControl [2:0] $end
$var reg 1 % ALUSrc $end
$var reg 1 & branch $end
$var reg 1 ' clk $end
$var reg 2 ( inmSrc [1:0] $end
$var reg 32 ) instr [31:0] $end
$var reg 1 * jump $end
$var reg 32 + readData [31:0] $end
$var reg 1 , regWrite $end
$var reg 2 - resultSrc [1:0] $end
$scope module uut $end
$var wire 3 . ALUControl [2:0] $end
$var wire 32 / ALUResult [31:0] $end
$var wire 1 0 ALUSrc $end
$var wire 1 1 branch $end
$var wire 1 ' clk $end
$var wire 2 2 inmSrc [1:0] $end
$var wire 32 3 instr [31:0] $end
$var wire 1 4 jump $end
$var wire 7 5 opecode [6:0] $end
$var wire 16 6 pc [15:0] $end
$var wire 32 7 readData [31:0] $end
$var wire 1 , regWrite $end
$var wire 2 8 resultSrc [1:0] $end
$var wire 32 9 writeData [31:0] $end
$var wire 1 : zero $end
$var wire 32 ; s_srcB [31:0] $end
$var wire 32 < s_srcA [31:0] $end
$var wire 32 = s_src2 [31:0] $end
$var wire 32 > s_result [31:0] $end
$var wire 16 ? s_pcPlus [15:0] $end
$var wire 16 @ s_pcNext [15:0] $end
$var wire 16 A s_pcJump [15:0] $end
$var wire 16 B s_pc [15:0] $end
$var wire 16 C s_PCK1 [15:0] $end
$var wire 32 D s_InmExt [31:0] $end
$var wire 32 E s_ALUResult [31:0] $end
$var wire 1 F op $end
$var wire 1 G f7 $end
$var wire 3 H f3 [2:0] $end
$var reg 16 I cuatro [15:0] $end
$scope module addPC4 $end
$var wire 16 J res [15:0] $end
$var wire 16 K op2 [15:0] $end
$var wire 16 L op1 [15:0] $end
$upscope $end
$scope module addPCJump $end
$var wire 16 M op1 [15:0] $end
$var wire 16 N res [15:0] $end
$var wire 16 O op2 [15:0] $end
$upscope $end
$scope module alu $end
$var wire 3 P ALUControl [2:0] $end
$var wire 32 Q res [31:0] $end
$var wire 1 : zero $end
$var wire 32 R srcB [31:0] $end
$var wire 32 S srcA [31:0] $end
$var reg 32 T aux [31:0] $end
$var reg 1 U aux_zero $end
$upscope $end
$scope module bancoDeRegistros $end
$var wire 5 V a1 [4:0] $end
$var wire 5 W a2 [4:0] $end
$var wire 5 X a3 [4:0] $end
$var wire 1 ' clk $end
$var wire 32 Y rd1 [31:0] $end
$var wire 32 Z rd2 [31:0] $end
$var wire 1 , we $end
$var wire 32 [ wd3 [31:0] $end
$var integer 32 \ i [31:0] $end
$upscope $end
$scope module extensionDeSigno $end
$var wire 32 ] instr [31:0] $end
$var wire 2 ^ src [1:0] $end
$var wire 32 _ immExt [31:0] $end
$var reg 32 ` immaux [31:0] $end
$upscope $end
$scope module muxJump $end
$var wire 16 a e1 [15:0] $end
$var wire 16 b e2 [15:0] $end
$var wire 16 c sal [15:0] $end
$var wire 1 4 sel $end
$var reg 16 d aux [15:0] $end
$upscope $end
$scope module muxPcNext $end
$var wire 16 e e1 [15:0] $end
$var wire 16 f e2 [15:0] $end
$var wire 16 g sal [15:0] $end
$var wire 1 1 sel $end
$var reg 16 h aux [15:0] $end
$upscope $end
$scope module muxResult $end
$var wire 32 i e1 [31:0] $end
$var wire 32 j e2 [31:0] $end
$var wire 32 k e3 [31:0] $end
$var wire 32 l e4 [31:0] $end
$var wire 32 m sal [31:0] $end
$var wire 2 n sel [1:0] $end
$var reg 32 o aux [31:0] $end
$upscope $end
$scope module muxSrcB $end
$var wire 32 p e1 [31:0] $end
$var wire 32 q e2 [31:0] $end
$var wire 32 r sal [31:0] $end
$var wire 1 0 sel $end
$var reg 32 s aux [31:0] $end
$upscope $end
$scope module pcReg $end
$var wire 1 ' clk $end
$var wire 16 t pcNext [15:0] $end
$var wire 16 u pc [15:0] $end
$var reg 16 v s_pc [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 v
b0 u
bx t
bx s
bx r
b1 q
b0 p
bx o
bz n
bx m
b0xxxxxxxxxxxxxxxx l
b1 k
bx j
bx i
bx h
bx g
b1 f
b100 e
bx d
bx c
b1 b
bx a
b1 `
b1 _
b0 ^
b100001000000100000000 ]
b100000 \
bx [
b0 Z
b0 Y
b10 X
b1 W
b1 V
0U
bx T
b0 S
bx R
bx Q
b0 P
b0 O
b1 N
b1 M
bx L
b0 K
bx J
b100 I
b0 H
0G
0F
bx E
b1 D
bx C
b0 B
b1 A
bx @
bx ?
bx >
b0 =
b0 <
bx ;
0:
b0 9
bz 8
bx 7
b0 6
bz 5
z4
b100001000000100000000 3
b0 2
z1
z0
bx /
b0 .
b0 -
1,
bx +
0*
b100001000000100000000 )
b0 (
0'
0&
1%
b0 $
bx #
b0 "
b0 !
$end
#50
bx A
bx N
bx b
bx "
bx 6
bx B
bx K
bx O
bx u
bx v
1'
#100
0'
#150
1'
#200
0'
