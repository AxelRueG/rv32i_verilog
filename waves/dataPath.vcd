$date
	Wed Feb  7 17:31:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ns
$end
$scope module dataPath_tb $end
$var wire 1 ! zero $end
$var wire 32 " writeData [31:0] $end
$var wire 16 # pc [15:0] $end
$var wire 7 $ opecode [6:0] $end
$var wire 1 % f7 $end
$var wire 3 & f3 [2:0] $end
$var wire 32 ' ALUResult [31:0] $end
$var reg 3 ( ALUControl [2:0] $end
$var reg 1 ) ALUSrc $end
$var reg 1 * branch $end
$var reg 1 + clk $end
$var reg 2 , inmSrc [1:0] $end
$var reg 32 - instr [31:0] $end
$var reg 1 . jump $end
$var reg 32 / readData [31:0] $end
$var reg 1 0 regWrite $end
$var reg 2 1 resultSrc [1:0] $end
$scope module uut $end
$var wire 3 2 ALUControl [2:0] $end
$var wire 32 3 ALUResult [31:0] $end
$var wire 1 ) ALUSrc $end
$var wire 1 * branch $end
$var wire 1 + clk $end
$var wire 2 4 inmSrc [1:0] $end
$var wire 32 5 instr [31:0] $end
$var wire 1 . jump $end
$var wire 16 6 pc [15:0] $end
$var wire 32 7 readData [31:0] $end
$var wire 1 0 regWrite $end
$var wire 2 8 resultSrc [1:0] $end
$var wire 32 9 writeData [31:0] $end
$var wire 1 ! zero $end
$var wire 32 : s_srcB [31:0] $end
$var wire 32 ; s_srcA [31:0] $end
$var wire 32 < s_src2 [31:0] $end
$var wire 32 = s_result [31:0] $end
$var wire 16 > s_pcPlus [15:0] $end
$var wire 16 ? s_pcNext [15:0] $end
$var wire 16 @ s_pcJump [15:0] $end
$var wire 16 A s_pc [15:0] $end
$var wire 16 B s_PCK1 [15:0] $end
$var wire 32 C s_InmExt [31:0] $end
$var wire 32 D s_ALUResult [31:0] $end
$var wire 7 E opecode [6:0] $end
$var wire 1 % f7 $end
$var wire 3 F f3 [2:0] $end
$var reg 16 G cuatro [15:0] $end
$scope module addPC4 $end
$var wire 16 H res [15:0] $end
$var wire 16 I op2 [15:0] $end
$var wire 16 J op1 [15:0] $end
$upscope $end
$scope module addPCJump $end
$var wire 16 K op1 [15:0] $end
$var wire 16 L res [15:0] $end
$var wire 16 M op2 [15:0] $end
$upscope $end
$scope module alu $end
$var wire 3 N ALUControl [2:0] $end
$var wire 32 O res [31:0] $end
$var wire 1 ! zero $end
$var wire 32 P srcB [31:0] $end
$var wire 32 Q srcA [31:0] $end
$var reg 32 R aux [31:0] $end
$var reg 1 S aux_zero $end
$upscope $end
$scope module bancoDeRegistros $end
$var wire 5 T a1 [4:0] $end
$var wire 5 U a2 [4:0] $end
$var wire 5 V a3 [4:0] $end
$var wire 1 + clk $end
$var wire 32 W rd1 [31:0] $end
$var wire 32 X rd2 [31:0] $end
$var wire 1 0 we $end
$var wire 32 Y wd3 [31:0] $end
$var integer 32 Z i [31:0] $end
$upscope $end
$scope module extensionDeSigno $end
$var wire 32 [ instr [31:0] $end
$var wire 2 \ src [1:0] $end
$var wire 32 ] immExt [31:0] $end
$var reg 32 ^ immaux [31:0] $end
$upscope $end
$scope module muxJump $end
$var wire 16 _ e1 [15:0] $end
$var wire 16 ` e2 [15:0] $end
$var wire 16 a sal [15:0] $end
$var wire 1 . sel $end
$var reg 16 b aux [15:0] $end
$upscope $end
$scope module muxPcNext $end
$var wire 16 c e1 [15:0] $end
$var wire 16 d e2 [15:0] $end
$var wire 16 e sal [15:0] $end
$var wire 1 * sel $end
$var reg 16 f aux [15:0] $end
$upscope $end
$scope module muxResult $end
$var wire 32 g e1 [31:0] $end
$var wire 32 h e2 [31:0] $end
$var wire 32 i e3 [31:0] $end
$var wire 32 j e4 [31:0] $end
$var wire 32 k sal [31:0] $end
$var wire 2 l sel [1:0] $end
$var reg 32 m aux [31:0] $end
$upscope $end
$scope module muxSrcB $end
$var wire 32 n e1 [31:0] $end
$var wire 32 o e2 [31:0] $end
$var wire 32 p sal [31:0] $end
$var wire 1 ) sel $end
$var reg 32 q aux [31:0] $end
$upscope $end
$scope module pcReg $end
$var wire 1 + clk $end
$var wire 16 r pcNext [15:0] $end
$var wire 16 s pc [15:0] $end
$var reg 16 t s_pc [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 t
b0 s
b100 r
b1 q
b1 p
b1 o
b0 n
b1 m
b0 l
b1 k
b100 j
b1 i
bx h
b1 g
b100 f
b100 e
b1 d
b100 c
b100 b
b100 a
b1 `
b100 _
b1 ^
b1 ]
b0 \
b100001000000100000000 [
b100000 Z
b1 Y
b0 X
b0 W
b10 V
b1 U
b1 T
0S
b1 R
b0 Q
b1 P
b1 O
b0 N
b0 M
b1 L
b1 K
b100 J
b0 I
b100 H
b100 G
b0 F
b0 E
b1 D
b1 C
b100 B
b0 A
b1 @
b100 ?
b100 >
b1 =
b0 <
b0 ;
b1 :
b0 9
b0 8
bx 7
b0 6
b100001000000100000000 5
b0 4
b1 3
b0 2
b0 1
10
bx /
0.
b100001000000100000000 -
b0 ,
0+
0*
1)
b0 (
b1 '
b0 &
0%
b0 $
b0 #
b0 "
0!
$end
#50
b1000 B
b1000 a
b1000 r
b1000 b
b101 @
b101 L
b101 `
b1000 j
b1000 ?
b1000 H
b1000 _
b100 #
b100 6
b100 A
b100 I
b100 M
b100 s
b100 t
1+
#100
0+
#150
b1100 B
b1100 a
b1100 r
b1100 b
b1001 @
b1001 L
b1001 `
b1100 j
b1100 ?
b1100 H
b1100 _
b1000 #
b1000 6
b1000 A
b1000 I
b1000 M
b1000 s
b1000 t
1+
#200
0+
