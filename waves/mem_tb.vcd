$date
	Wed Feb  7 12:27:39 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ns
$end
$scope module mem_tb $end
$var wire 32 ! readData [31:0] $end
$var wire 32 " instr [31:0] $end
$var reg 16 # addr [15:0] $end
$var reg 1 $ clk $end
$var reg 16 % pc [15:0] $end
$var reg 1 & we $end
$var reg 32 ' writeData [31:0] $end
$scope module uut $end
$var wire 16 ( addr [15:0] $end
$var wire 1 $ clk $end
$var wire 16 ) pc [15:0] $end
$var wire 1 & we $end
$var wire 32 * writeData [31:0] $end
$var wire 32 + readData [31:0] $end
$var wire 32 , instr [31:0] $end
$scope module dataMemory $end
$var wire 16 - addres [15:0] $end
$var wire 1 $ clk $end
$var wire 32 . rd [31:0] $end
$var wire 32 / wd [31:0] $end
$var wire 1 & we $end
$upscope $end
$scope module instructionMemory $end
$var wire 32 0 instr [31:0] $end
$var wire 16 1 pc [15:0] $end
$var parameter 32 2 ROM_ADDR_BITS $end
$var parameter 32 3 ROM_WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 3
b1000 2
$end
#0
$dumpvars
b0 1
b1000000000000000000010110010011 0
b1010010011 /
bx .
b0 -
b1000000000000000000010110010011 ,
bx +
b1010010011 *
b0 )
b0 (
b1010010011 '
1&
b0 %
0$
b0 #
b1000000000000000000010110010011 "
bx !
$end
#50
b1010010011 !
b1010010011 +
b1010010011 .
1$
#100
0$
0&
b1010010101 '
b1010010101 *
b1010010101 /
bx !
bx +
bx .
b1 #
b1 (
b1 -
b1000000000001011000010110010011 "
b1000000000001011000010110010011 ,
b1000000000001011000010110010011 0
b100 %
b100 )
b100 1
#150
1$
#200
0$
